generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model DApp {
  id              String     @id @default(cuid())
  name            String     @unique
  url             String
  balance         String     @default("0")
  totalUsed       String     @default("0")
  createdAt       DateTime   @default(now())
  active          Boolean    @default(true)
  terminationDate String?
  contracts       Contract[]
  senders         Sender[]
  apiKeys         ApiKey[]
  emailAlerts     EmailAlert[]
  userAccess      UserDappAccess[]
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String   @unique
  name      String
  active    Boolean  @default(true)
  dapp      DApp     @relation(fields: [dappId], references: [id], onDelete: Cascade)
  dappId    String
  createdAt DateTime @default(now())

  @@index([dappId], map: "ApiKey_dappId_fkey")
}

model Contract {
  id          String   @id @default(cuid())
  address     String
  hasSwap     Boolean  @default(false)
  swapAddress String?
  active      Boolean  @default(true)
  dapp        DApp     @relation(fields: [dappId], references: [id], onDelete: Cascade)
  dappId      String
  createdAt   DateTime @default(now())

  @@unique([address, dappId, swapAddress])
  @@index([dappId], map: "Contract_dappId_fkey")
}

model Sender {
  id        String   @id @default(cuid())
  address   String
  active    Boolean  @default(true)
  dappId    String
  dapp      DApp     @relation(fields: [dappId], references: [id], onDelete: Cascade)

  @@unique([address, dappId])
  @@index([dappId], map: "Sender_dappId_fkey")
}

model EmailAlert {
  id              String   @id @default(cuid())
  email           String
  balanceThreshold String
  isActive        Boolean  @default(true)
  dapp            DApp     @relation(fields: [dappId], references: [id], onDelete: Cascade)
  dappId          String
  createdAt       DateTime @default(now())

  @@index([dappId], map: "EmailAlert_dappId_fkey")
}

model EmailAlertLog {
  id        String   @id @default(cuid())
  email     String
  dappId    String
  dappName  String
  newBalance String
  threshold String
  sentAt    DateTime @default(now())
  isRead    Boolean  @default(false)

  @@index([dappId], map: "EmailAlertLog_dappId_fkey")
}

enum UserRole {
  SUPER_ADMIN
  EDITOR
  VIEWER
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String?
  role         UserRole  @default(VIEWER)
  firstName    String
  lastName     String
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdBy    String
  lastLoginAt  DateTime?

  resetTokens  PasswordResetToken[]
  dappAccess   UserDappAccess[]

}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
  @@index([userId, used])
}

model UserDappAccess {
  id     String @id @default(cuid())
  userId String
  dappId String
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  dapp   DApp   @relation(fields: [dappId], references: [id], onDelete: Cascade)
  
  @@unique([userId, dappId])
}
